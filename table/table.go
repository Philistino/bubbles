package table

import (
	"fmt"
	"sort"
	"strings"

	"github.com/charmbracelet/bubbles/key"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
	"github.com/mattn/go-runewidth"
)

// TODO: test behaviour regarding setting the height and cursor

// TODO: Set cursor should prefer no shift in the window

// Model defines a state for the table widget.
type Model struct {
	KeyMap KeyMap

	cols     []Column
	rows     []Row
	cursor   int
	focus    bool
	styles   Styles
	selected map[int]struct{}

	start  int
	end    int
	height int
	width  int
}

// Row represents one line in the table.
type Row []string

// Column defines the table structure.
type Column struct {
	Title string
	Width int
}

// KeyMap defines keybindings. It satisfies to the help.KeyMap interface, which
// is used to render the menu.
type KeyMap struct {
	LineUp              key.Binding
	LineDown            key.Binding
	PageUp              key.Binding
	PageDown            key.Binding
	HalfPageUp          key.Binding
	HalfPageDown        key.Binding
	GotoTop             key.Binding
	GotoBottom          key.Binding
	MultiSelectUp       key.Binding
	MultiSelectDown     key.Binding
	MultiSelectToTop    key.Binding
	MultiSelectToBottom key.Binding
	Blur                key.Binding
}

// DefaultKeyMap returns a default set of keybindings.
func DefaultKeyMap() KeyMap {
	const spacebar = " "
	return KeyMap{
		LineUp: key.NewBinding(
			key.WithKeys("up", "k"),
			key.WithHelp("↑/k", "up"),
		),
		LineDown: key.NewBinding(
			key.WithKeys("down", "j"),
			key.WithHelp("↓/j", "down"),
		),
		PageUp: key.NewBinding(
			key.WithKeys("b", "pgup"),
			key.WithHelp("b/pgup", "page up"),
		),
		PageDown: key.NewBinding(
			key.WithKeys("f", "pgdown", spacebar),
			key.WithHelp("f/pgdn", "page down"),
		),
		HalfPageUp: key.NewBinding(
			key.WithKeys("u", "ctrl+u"),
			key.WithHelp("u", "½ page up"),
		),
		HalfPageDown: key.NewBinding(
			key.WithKeys("d", "ctrl+d"),
			key.WithHelp("d", "½ page down"),
		),
		GotoTop: key.NewBinding(
			key.WithKeys("home", "g"),
			key.WithHelp("g/home", "go to start"),
		),
		GotoBottom: key.NewBinding(
			key.WithKeys("end", "G"),
			key.WithHelp("G/end", "go to end"),
		),
		MultiSelectUp: key.NewBinding(
			key.WithKeys("shift+up", "shift+k"),
			key.WithHelp("shift+up/shift+k", "multi-select up"),
		),
		MultiSelectDown: key.NewBinding(
			key.WithKeys("shift+down", "shift+j"),
			key.WithHelp("shift+down/shift+j", "multi-select down"),
		),
		MultiSelectToTop: key.NewBinding(
			key.WithKeys("shift+home"),
			key.WithHelp("ctrl+shift+up", "multi-select to top"),
		),
		MultiSelectToBottom: key.NewBinding(
			key.WithKeys("shift+end"),
			key.WithHelp("ctrl+shift+down", "multi-select to bottom"),
		),
	}
}

// Styles contains style definitions for this list component. By default, these
// values are generated by DefaultStyles.
type Styles struct {
	Header   lipgloss.Style
	Cell     lipgloss.Style
	Selected lipgloss.Style
	Cursor   lipgloss.Style
}

// DefaultStyles returns a set of default style definitions for this table.
func DefaultStyles() Styles {
	return Styles{
		Selected: lipgloss.NewStyle().Bold(true).Foreground(lipgloss.Color("212")),
		Header:   lipgloss.NewStyle().Bold(true).Padding(0, 1),
		Cell:     lipgloss.NewStyle().Padding(0, 1),
		Cursor:   lipgloss.NewStyle().Bold(true).Foreground(lipgloss.Color("212")),
	}
}

// SetStyles sets the table styles.
func (m *Model) SetStyles(s Styles) {
	m.styles = s
}

// Option is used to set options in New. For example:
//
//	table := New(WithColumns([]Column{{Title: "ID", Width: 10}}))
type Option func(*Model)

// New creates a new model for the table widget.
func New(opts ...Option) Model {
	m := Model{
		cursor:   0,
		selected: map[int]struct{}{0: {}},
		KeyMap:   DefaultKeyMap(),
		styles:   DefaultStyles(),
	}
	for _, opt := range opts {
		opt(&m)
	}

	m.UpdateViewport()

	return m
}

func WithCursor(n int) Option {
	return func(m *Model) {
		m.cursor = n
		m.selected = map[int]struct{}{n: {}}
	}
}

// WithColumns sets the table columns (headers).
func WithColumns(cols []Column) Option {
	return func(m *Model) {
		m.cols = cols
	}
}

// WithRows sets the table rows (data).
func WithRows(rows []Row) Option {
	return func(m *Model) {
		m.rows = rows
	}
}

// WithHeight sets the height of the table.
func WithHeight(h int) Option {
	return func(m *Model) {
		m.SetHeight(h)
	}
}

// WithWidth sets the width of the table.
func WithWidth(w int) Option {
	return func(m *Model) {
		m.width = w
	}
}

// WithFocused sets the focus state of the table.
func WithFocused(f bool) Option {
	return func(m *Model) {
		m.focus = f
	}
}

// WithStyles sets the table styles.
func WithStyles(s Styles) Option {
	return func(m *Model) {
		m.styles = s
	}
}

// WithKeyMap sets the key map.
func WithKeyMap(km KeyMap) Option {
	return func(m *Model) {
		m.KeyMap = km
	}
}

// Update is the Bubble Tea update loop.
func (m Model) Update(msg tea.Msg) (Model, tea.Cmd) {
	if !m.focus {
		return m, nil
	}

	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch {
		case key.Matches(msg, m.KeyMap.LineUp):
			m.MoveUp(1, false)
		case key.Matches(msg, m.KeyMap.LineDown):
			m.MoveDown(1, false)
		case key.Matches(msg, m.KeyMap.PageUp):
			m.MoveUp(m.height, false)
		case key.Matches(msg, m.KeyMap.PageDown):
			m.MoveDown(m.height, false)
		case key.Matches(msg, m.KeyMap.HalfPageUp):
			m.MoveUp(m.height/2, false)
		case key.Matches(msg, m.KeyMap.HalfPageDown):
			m.MoveDown(m.height/2, false)
		case key.Matches(msg, m.KeyMap.LineDown):
			m.MoveDown(1, false)
		case key.Matches(msg, m.KeyMap.GotoTop):
			m.GotoTop()
		case key.Matches(msg, m.KeyMap.GotoBottom):
			m.GotoBottom()
		case key.Matches(msg, m.KeyMap.MultiSelectUp):
			m.MoveUp(1, true)
		case key.Matches(msg, m.KeyMap.MultiSelectDown):
			m.MoveDown(1, true)
		case key.Matches(msg, m.KeyMap.MultiSelectToTop):
			m.MultiSelectToTop()
		case key.Matches(msg, m.KeyMap.MultiSelectToBottom):
			m.MultiSelectToBottom()
		}
	}

	return m, nil
}

// Focused returns the focus state of the table.
func (m Model) Focused() bool {
	return m.focus
}

// Focus focuses the table, allowing the user to move around the rows and
// interact.
func (m *Model) Focus() {
	m.focus = true
}

// Blur blurs the table, preventing selection or movement.
func (m *Model) Blur() {
	m.focus = false
}

// View renders the component.
func (m Model) View() string {

	if m.height == 0 || len(m.rows) == 0 {
		return m.headersView()
	}

	renderedRows := make([]string, 0, m.height)
	for i := m.start; i <= m.end; i++ {
		renderedRows = append(renderedRows, m.renderRow(i))
	}
	return lipgloss.JoinVertical(
		lipgloss.Center,
		m.headersView(),
		lipgloss.JoinVertical(lipgloss.Left, renderedRows...),
	)
}

// SelectedRows returns the indexes of the selected rows.
func (m Model) SelectedRows() []int {
	rows := make([]int, 0, len(m.selected))
	for k, _ := range m.selected {
		rows = append(rows, k)
	}
	sort.Ints(rows)
	return rows
}

// Rows returns the current rows.
func (m Model) Rows() []Row {
	return m.rows
}

// SetRows sets a new rows state.
func (m *Model) SetRows(r []Row) {
	m.rows = r
	m.UpdateViewport()
}

// SetColumns sets a new columns state.
func (m *Model) SetColumns(c []Column) {
	m.cols = c
}

// SetWidth sets the width of the viewport of the table.
func (m *Model) SetWidth(w int) {
	m.width = w
}

func (m *Model) SetSelected(idxs []int) error {
	for _, idx := range idxs {
		if idx < 0 || idx >= len(m.rows)-1 {
			return fmt.Errorf("index out of bounds: %d", idx)
		}
		m.selected[idx] = struct{}{}
	}
	return nil
}

// SetHeight sets the number of rows that will be displayed.
// If height is set to zero, the table will become unresponsive (blurred)
// because the user would not be able to see what is happening with the table.
func (m *Model) SetHeight(h int) {
	grow := h - m.height
	// height is the number of rows showing so it is "1 indexed"
	m.height = clamp(h, 0, len(m.rows))
	switch {
	//no op
	case grow == 0:
		return
	// show no rows and blur the table
	case m.height == 0:
		m.start = m.cursor
		m.end = m.cursor
		m.Blur()
	// show all rows
	case m.height == len(m.rows):
		m.start = 0
		m.end = len(m.rows) - 1
		// cursor is at the start, cut or add rows at the bottom
	case m.cursor == 0:
		m.start = 0 // start should already be 0, this is for readability
		m.end = clamp(m.height-1, 0, len(m.rows)-1)
	// cursor is at the end, cut or add rows at the top
	case m.cursor == len(m.rows)-1:
		m.end = len(m.rows) - 1 // end should already be at last value, this is for readability
		m.start = clamp(m.end-m.height+1, 0, len(m.rows)-1)

	// grow as much down as possible and then add above if needed
	case grow > 0:
		m.end = clamp(m.start+m.height-1, m.start, len(m.rows)-1)
		m.start = clamp(m.end-m.height+1, 0, m.end)

	// remove from end until reaching the cursor, then remove from the top
	case grow < 0:
		if m.end+grow <= m.cursor {
			m.end = m.cursor
		} else {
			m.end = m.end + grow
		}
		m.start = clamp(m.end-m.height+1, 0, len(m.rows)-1)

		// cursor is in the middle, and the new height change is a shrink but it won't cut off the current cursor position,
		// so cut rows from the bottom.
		// case m.cursor <= m.start+m.height-1 && grow < 0:
		// 	m.end = clamp(m.start+m.height-1, m.start, len(m.rows)-1)

		// // cursor is in the middle and will be cut off by the height change cut rows from both sides to center the cursor
		// default:
		// 	startPosition := (m.cursor - m.height/2)
		// 	m.start = clamp(startPosition, 0, len(m.rows)-1)
		// 	m.end = clamp(m.start+m.height-1, m.start, len(m.rows)-1)
		// 	if m.end-m.start+1 != m.height {
		// 		// clean up rounding errors
		// 		m.start = clamp(m.end-m.height+1, 0, len(m.rows)-1)
		// 	}
	}
	m.UpdateViewport()
}

// Height returns the viewport height of the table.
func (m Model) Height() int {
	return m.height
}

// Width returns the viewport width of the table.
func (m Model) Width() int {
	return m.width
}

// Cursor returns the index of the selected row.
func (m Model) Cursor() int {
	return m.cursor
}

// SetCursor sets the cursor position in the table.
// If you only want one item selected, call ClearSelected before this method.
func (m *Model) SetCursor(n int) {
	m.cursor = clamp(n, 0, len(m.rows)-1)
	m.UpdateViewport()
}

func (m *Model) ClearSelected() {
	for k := range m.selected {
		delete(m.selected, k)
	}
}

func (m *Model) manageSelected(n int, multi bool, down bool) {
	// record existing cursor position
	preCursor := m.cursor

	// to make this method useable for both up and down movements
	if down {
		n = n * -1
	}
	m.cursor = clamp(m.cursor-n, 0, len(m.rows)-1)

	if !multi {
		m.ClearSelected()
		m.selected[m.cursor] = struct{}{}
		return
	}

	// if the cursor didn't move (e.g., at top of list),
	// and we are multi-selecting, return early, its a noop
	if m.cursor == preCursor {
		return
	}

	// if the new cursor was already in the map, the user is actually de-selecting
	// the prior extrema of the multi-select so we delete it from the map and return
	_, ok := m.selected[m.cursor]
	if ok {
		delete(m.selected, preCursor)
		return
	}

	// we are extending the multiselect
	m.selected[m.cursor] = struct{}{}
}

// UpdateViewport updates the list content based on the previously defined
// columns and rows.
func (m *Model) UpdateViewport() {
	switch {
	case m.height == 0:
		m.start = m.cursor
		m.end = m.cursor
	case m.start <= m.cursor && m.cursor <= m.end:
		// do nothing
	case m.cursor > m.end:
		m.end = m.cursor
		m.start = m.end - m.height + 1
	case m.cursor < m.start:
		m.start = m.cursor
		m.end = m.start + m.height - 1
	}
}

// MoveUp moves the selection up by any number of rows.
// It can not go above the first row.
func (m *Model) MoveUp(n int, multi bool) {
	m.manageSelected(n, multi, false)
	m.UpdateViewport()
}

// MoveDown moves the selection down by any number of rows.
// It can not go below the last row.
func (m *Model) MoveDown(n int, multi bool) {
	m.manageSelected(n, multi, true)
	m.UpdateViewport()
}

func (m *Model) MultiSelectToTop() {
	for i := 0; i <= m.cursor; i++ {
		m.selected[i] = struct{}{}
	}
	m.SetCursor(0)
	m.UpdateViewport()
}

func (m *Model) MultiSelectToBottom() {
	for i := m.cursor; i < len(m.rows); i++ {
		m.selected[i] = struct{}{}
	}
	m.SetCursor(len(m.rows) - 1)
	m.UpdateViewport()
}

// GotoTop moves the selection to the first row.
func (m *Model) GotoTop() {
	m.MoveUp(m.cursor, false)
}

// GotoBottom moves the selection to the last row.
func (m *Model) GotoBottom() {
	m.MoveDown(len(m.rows), false)
}

// FromValues create the table rows from a simple string. It uses `\n` by
// default for getting all the rows and the given separator for the fields on
// each row.
func (m *Model) FromValues(value, separator string) {
	rows := []Row{}
	for _, line := range strings.Split(value, "\n") {
		r := Row{}
		for _, field := range strings.Split(line, separator) {
			r = append(r, field)
		}
		rows = append(rows, r)
	}

	m.SetRows(rows)
}

func (m Model) headersView() string {
	var s = make([]string, 0, len(m.cols))
	for _, col := range m.cols {
		style := lipgloss.NewStyle().Width(col.Width).MaxWidth(col.Width).Inline(true)
		renderedCell := style.Render(runewidth.Truncate(col.Title, col.Width, "…"))
		s = append(s, m.styles.Header.Render(renderedCell))
	}
	return lipgloss.JoinHorizontal(lipgloss.Left, s...)
}

func (m *Model) renderRow(rowID int) string {
	var s = make([]string, 0, len(m.cols))
	for i, value := range m.rows[rowID] {
		style := lipgloss.NewStyle().Width(m.cols[i].Width).MaxWidth(m.cols[i].Width).Inline(true)
		renderedCell := m.styles.Cell.Render(style.Render(runewidth.Truncate(value, m.cols[i].Width, "…")))
		s = append(s, renderedCell)
	}

	row := lipgloss.JoinHorizontal(lipgloss.Left, s...)

	if rowID == m.cursor {
		return m.styles.Cursor.Render(row)
	}

	_, ok := m.selected[rowID]
	if ok {
		return m.styles.Selected.Render(row)
	}

	return row
}

func max(a, b int) int {
	if a > b {
		return a
	}

	return b
}

func min(a, b int) int {
	if a < b {
		return a
	}

	return b
}

func clamp(v, low, high int) int {
	return min(max(v, low), high)
}
